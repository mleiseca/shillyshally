Date range (start) - (end) Project (project name) aggregate? (checkbox)
 -> maybe replace "date range" section with "week" or "Month" and let the user browse http://farm5.static.flickr.com/4015/4332774384_063d1be994.jpg
 -> http://projecthamster.files.wordpress.com/2010/01/overview-with-search.png?w=720
 -> "what's happening?" http://farm5.static.flickr.com/4004/4481743631_804c079944.jpg

- menu bar to remind you if you are inactive

- how to write unit tests???

- start/stop when notes field is selected

- reporting for work done
 - it would be neat if it could display bars per ticket showing how much time spent
 
- lock screen shortcut to stop timer?
 - The best I've found to to use a NSTask to launch and terminate ScreenSaverEngine. When terminated, without -background, ScreenSaverEngine will stop to prompt for a password if the user has configured their system to do so.

- add project deadline
- add task priority

- project inactive button 
 -> should only work if no active tasks exist for that project
 -> if there are no active tasks, it should remove project from list and mark it as inactive

- how do you retain user preference information
 -> so that windows open in the same place?
 -> so that table columns retain their adjusted size?

- shortcuts to close window with apple-w

- weirdness if you have an active task with an inactive project

- use sparkle for pushing updates

- add tags to tasks
 -> this could lead to interesting reports (http://projecthamster.wordpress.com/2010/01/03/implementing-tags-part-two/)
 -> OR, could be used like how I search in yojimbo (or delicious)
 
- break mainmenu nib into mainwindow and mainmenu. see SourceView sample project for details


- sidebar for showing projects
 -> add "Context" to project so that I can see/hide GRubhub or personal or just choose one project
 -> http://developer.apple.com/mac/library/samplecode/SourceView/Introduction/Intro.html
 -> subclass @interface MyWindowController : NSWindowController
 -> need new nib for each of the content views (now: work timing, reports)
    - create controllers from nib during windowController.awakeFromNib


- keyboard shortcut for toggling from history to notes

- cleanup project view to have separate nsviewcontroller


--------------------------------------------------------------------------------------------------------------------------------

- timeout style break timing
 -> should make sure that you are still at computer before restarting timer
 -> certain tasks should be excempt from breaks (ie, is meeting?)


- "done" with running task doesn't stop timer
- change dock/tab icon depending on state (ie, working = green clock, not working = red clock)

- copy row in table: (ie, when row is selected, hitting command-c will copy a nicely formatted commit message with hours estimate and ticket)
  - subclass table view (http://www.cocoabuilder.com/archive/cocoa/115492-copy-paste-in-nstableview.html)
  - - (IBAction) copy:(id)sender {
		NSLog(@"Copy");
	}


- adding project support
 -> shortcut for project dropdown in table?

- add groups for tasks
 -> this requires a screen to enter groups / manage reference data
 
- add notes sections for each task below table 

- if you are making data model changes, how do you migrate the changes?

How do I get undo/redo for free in my non-document-architecture-based app?
In a Core Data document-based application, the standard NSDocument undo manager is replaced by the document’s managed object context’s undo manager. In a non-document-based application for desktop Mac OS X, your window’s delegate can supply the managed object context’s undo manager using the windowWillReturnUndoManager: delegate method. If your window delegate has an accessor method for the managed object context (as is the case if you use the Core Data Application template), your implementation of windowWillReturnUndoManager: might be as follows.
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)sender {
    return [[self managedObjectContext] undoManager];
}

- refactor so that windows have their own nib files

- refactor: reportingWindow in both app delegate and reportscontroller

- refactor: what is a good way to share the managedObjectContext?

- option enter for a newline?

- maybe display seconds for currently running task?

- screen overlay example: FunkyOverlayWindow

- refactor: category for "taskStopper" instead of passing around appController (ie, in breakController.initWithAppController)








